# coding: utf-8
import os

# file path
PARENT_DIR_PATH = os.path.dirname(os.path.realpath(os.path.join(__file__, '..')))
data_dir = os.path.join(PARENT_DIR_PATH,'data')
model_dir = os.path.join(PARENT_DIR_PATH, "checkpoint",'model')
log_file = os.path.join(PARENT_DIR_PATH, 'logs', 'cluster')
# bug_data = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'bug_feature_jaschen_0627/parquet')
bug_data = "/Users/Fiona/Documents/Cisco/data/bug_feature_jaschen_0627/parquet"
nonnlp_feature = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nonnlp_feature.csv')
nonnlp_feature_dict_pkl = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nonnlp_label_dict_feature.pkl')
dictionary_path = os.path.join(PARENT_DIR_PATH,"checkpoint",'all.dictionary')
tfidf_model_path = os.path.join(PARENT_DIR_PATH,"checkpoint",'tfidf.model')
lsi_model_path = os.path.join(PARENT_DIR_PATH,"checkpoint",'lsi.model')
word2vec_model_path = os.path.join(PARENT_DIR_PATH,"checkpoint",'word2vec.model')
scalar_model_path = os.path.join(PARENT_DIR_PATH,"checkpoint",'scalar.model')
pca_model_path = os.path.join(PARENT_DIR_PATH,"checkpoint",'pca.model')
nlp_data_clean  = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nlp_data_clean.csv')
nlp_data_clean_vec = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nlp_data_clean_vec.pkl')
nonnlp_data_clean  = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nonnlp_data_clean.csv')
train_data_all_pkl = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'train_data_all.pkl')

# clustering parameters
cluster_type = 'minibatchkmeans'
CLUSTER_MODEL = os.path.join(PARENT_DIR_PATH, "checkpoint", 'minibatchkmeans')
PCA_MODEL = os.path.join(PARENT_DIR_PATH, "checkpoint", 'pca')
StandardScaler_MODEL = os.path.join(PARENT_DIR_PATH, "checkpoint", 'StandardScaler')
cluster_tag_files = os.path.join(PARENT_DIR_PATH,'clusterdata', cluster_type + '_cluster_tags.csv' )
related_bug_files = os.path.join(PARENT_DIR_PATH,'clusterdata', cluster_type + '_related_bug_result.csv' )
related_bug_keyfeature_files = os.path.join(PARENT_DIR_PATH,'clusterdata', cluster_type + '_related_bug_result_iot_all' )
related_bug_keyfeature_files_json = os.path.join(PARENT_DIR_PATH,'clusterdata', cluster_type + '_related_bug_result_iot_all_json' )
cluster_tag_files_name = os.path.join(PARENT_DIR_PATH,'clusterdata', cluster_type + '_cluster_tags_with_id2name.csv')
cluster_tag_files_name_tmp = os.path.join(PARENT_DIR_PATH,'clusterdata', cluster_type + '_cluster_tags_with_id2name_tmp.txt')

## clustering model parameters
sentence_max_len = 100
cluster_num = 10
max_num_cluster = 1000
min_num_members_per_cluster = 5
members_per_cluster = 20

# nlp training dataset parameters
vocabulary  = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'vocab.txt')
vocabulary_freq  = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'keyword_analysis_report.csv')
nlp_train_file  = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nlp_train.txt')
nlp_valid_file  = os.path.join(PARENT_DIR_PATH, 'clusterdata', 'nlp_valid.txt')
vocabulary_size = 20000
filter_words_frequent = 2
filter_sentence_len = 2

# tensorflow model parameters
cell_type = 'gru'              # RNN cell type ,default: lstm
attention_type = 'bahdanau'    # attentions mechanism type: (bahdanau, luong), default: bahdanau
hidden_units = 50             # number of hidden units
depth = 2                      # number of neural network layers
embedding_size = 100           # Embedding dimensions
use_residual = True            # if or not use residual network between layers
attn_input_feeding = True      # Use input feeding method in attentional decoder
use_dropout = True             # if or not use dropout on rnn cell
dropout_rate = 0.5              # Dropout probability for input/output/state units (0.0: no dropout)')

# tensorflow training parameters
max_epochs =  0                 # number of max epochs
learning_rate = 0.001          # learning rate
split_rate = 0.1               # split rate
max_gradient_norm = 3.0        # gradient truncate value
batch_size = 128                 # Batch size
max_load_batches = 20           # max number of loading training batches
max_seq_length = 100           # max length of sentences
display_freq = 10              # number of steps to trained to display result
save_freq = 1150                # number of steps to trained to save result
valid_freq = 20                 # number of steps to trained to validate model
optimizer = 'adam'              # optimizer: (adadelta, adam, rmsprop)
model_name = 'cluster.ckpt'     # name of saved model

shuffle_each_epoch = True       # if or not to shuffle train dataset after each epoch
sort_by_length = True           # if or not to sort train dataset on length of sentence
use_fp16 = False               # Use half precision float16 instead of float32 as dtype
max_decode_step = 10
w2v_dim = 300                  # word2vec dimension
lsi_dim = 300                  # lsi dimension
pca_dim = 100            # pca dimension

# coding: utf-8
import os

# file path
PARENT_DIR_PATH = os.path.dirname(os.path.realpath(os.path.join(__file__, '..')))
bug_keyword_keyphrase= os.path.join(PARENT_DIR_PATH,'clusterdata', 'bug_keyword_keyphrase.csv')

input_bug_list_test_iot =['CSCux77907','CSCux84043']
input_bug_list_test_sw =['CSCux77336','CSCux80724']
input_bug_list_test_rt =['CSCux71526','CSCux72157']

input_bug_list_iot =['CSCvq11329',
'CSCvp99133',
'CSCvq03121',
'CSCvq06624',
'CSCvq10387',
'CSCvq18849',
'CSCvq21148',
'CSCvq00721',
'CSCvq02397',
'CSCvq05533',
'CSCvq11913',
'CSCvq15103',
'CSCvq18233',
'CSCvq23911',
'CSCvq09349',
'CSCvq28357',
'CSCvp99807',
'CSCvq02194',
'CSCvq13072',
'CSCvq15060',
'CSCvq19262',
'CSCvp98741',
'CSCvq15225',
'CSCvq16445',
'CSCvq18297',
'CSCvq19266',
'CSCvq28381',
'CSCvp97539',
'CSCvq08608',
'CSCvq11364',
'CSCvq13232',
'CSCvq19334',
'CSCvq04011',
'CSCvq21565',
'CSCvq21825',
'CSCvq13274',
'CSCvq22176',
'CSCvq06196',
'CSCvq08442',
'CSCvq08968',
'CSCvq26446',
'CSCvq02198',
'CSCvq17117',
'CSCvq26050',
'CSCvq27485',
'CSCvq06866',
'CSCvq19015',
'CSCvq17902',
'CSCvq25782',
'CSCvq05527',
'CSCvq17153',
'CSCvq18551',
'CSCvq19025',
'CSCvq22912',
'CSCvq08056',
'CSCvq03889',
'CSCvq05649',
'CSCvq00035',
'CSCvq01428',
'CSCvq02163',
'CSCvq14128',
'CSCvq22686',
'CSCvq23670',
'CSCvq10947',
'CSCvq21782',
'CSCvq03126',
'CSCvq26879',
'CSCvq06227',
'CSCvq09875',
'CSCvq20426',
'CSCvq22617',
'CSCvq00704',
'CSCvq08860',
'CSCvq23590',
'CSCvq27907',
'CSCvq03964',
'CSCvq11909',
'CSCvq13554',
'CSCvq21016',
'CSCvq14118',
'CSCvq03477',
'CSCvq11900',
'CSCvq13524',
'CSCvq19476',
'CSCvq26658',
'CSCvq05686',
'CSCvq13410',
'CSCvq03466',
'CSCvq11357',
'CSCvq26288',
'CSCvq02276',
'CSCvp98161',
'CSCvq01176',
'CSCvq15492',
'CSCvq15138',
'CSCvq15491',
'CSCvq23705',
'CSCvq24315',
'CSCvq01254',
'CSCvq05707',
'CSCvq02546',
'CSCvq11895',
'CSCvq13229',
'CSCvq05735',
'CSCvq06845',
'CSCvq23676',
'CSCvq07614',
'CSCvq14053',
'CSCvq16709',
'CSCvq17649',
'CSCvq20650',
'CSCvq02866',
'CSCvq03149',
'CSCvq11019',
'CSCvp97529',
'CSCvq06808',
'CSCvq06878',
'CSCvq07030',
'CSCvq14429',
'CSCvq19396',
'CSCvq27912']


input_bug_list_rt =['CSCvq05831',
'CSCvq10296',
'CSCvq14908',
'CSCvq19469',
'CSCvq23303',
'CSCvq02680',
'CSCvq18793',
'CSCvq19331',
'CSCvq17252',
'CSCvq23098',
'CSCvq26586',
'CSCvq01895',
'CSCvq05851',
'CSCvq07796',
'CSCvq05882',
'CSCvq11046',
'CSCvq17410',
'CSCvq18996',
'CSCvq24373',
'CSCvq04031',
'CSCvq04323',
'CSCvq06567',
'CSCvq11842',
'CSCvq20931',
'CSCvq02599',
'CSCvq08958',
'CSCvp99492',
'CSCvq15086',
'CSCvq22733',
'CSCvq24211',
'CSCvp99511',
'CSCvq24938',
'CSCvq02027',
'CSCvq15240',
'CSCvq15248',
'CSCvq03776',
'CSCvq25366',
'CSCvp99935',
'CSCvq05947',
'CSCvq08247',
'CSCvq07696',
'CSCvq13759',
'CSCvq15063',
'CSCvq16878',
'CSCvq18549',
'CSCvq25224',
'CSCvq01209',
'CSCvq04390',
'CSCvq11833',
'CSCvq13604',
'CSCvq20864',
'CSCvq26953',
'CSCvq00648',
'CSCvq05904',
'CSCvq13100',
'CSCvq19776',
'CSCvq24488',
'CSCvq03780',
'CSCvp99175',
'CSCvq13754',
'CSCvq15009',
'CSCvq09348',
'CSCvq13376',
'CSCvq21326',
'CSCvp98906',
'CSCvp99635',
'CSCvq02436',
'CSCvq15078',
'CSCvq15488',
'CSCvq20685',
'CSCvq21891',
'CSCvq25187',
'CSCvq05606',
'CSCvq15266',
'CSCvq02427',
'CSCvq03949',
'CSCvq05456',
'CSCvq00976',
'CSCvq01471',
'CSCvq21459',
'CSCvq05384',
'CSCvq09638',
'CSCvq11402',
'CSCvq14913',
'CSCvq24228',
'CSCvq01435',
'CSCvq25048',
'CSCvq27566',
'CSCvp99904',
'CSCvq00953',
'CSCvq09592',
'CSCvq10663',
'CSCvq22961',
'CSCvq02014',
'CSCvq04321',
'CSCvq13599',
'CSCvp99242',
'CSCvp99958',
'CSCvq02756',
'CSCvq15207',
'CSCvq24517',
'CSCvq24600',
'CSCvp99357',
'CSCvp99424',
'CSCvq09079',
'CSCvq20926',
'CSCvq23092',
'CSCvp99425',
'CSCvq01960',
'CSCvq10222',
'CSCvq13569',
'CSCvq05636',
'CSCvq07419',
'CSCvq16666',
'CSCvq16951',
'CSCvq24011',
'CSCvq06869',
'CSCvq10702',
'CSCvq13073',
'CSCvq17350',
'CSCvq26746',
'CSCvq00106',
'CSCvq07618',
'CSCvq09947',
'CSCvq10899',
'CSCvq17335',
'CSCvq21344',
'CSCvq03817',
'CSCvq06400',
'CSCvq07791',
'CSCvq12439',
'CSCvq07724',
'CSCvq17376',
'CSCvq19463',
'CSCvq02093',
'CSCvq02720',
'CSCvq03414',
'CSCvq07379',
'CSCvq11379',
'CSCvq15006',
'CSCvq17326',
'CSCvq06576',
'CSCvq10232',
'CSCvq13536',
'CSCvq09445',
'CSCvq22667',
'CSCvq22777',
'CSCvq04514',
'CSCvq03182',
'CSCvq05452',
'CSCvq11896',
'CSCvq16157',
'CSCvq04519',
'CSCvq11821',
'CSCvq22808',
'CSCvq01184',
'CSCvq04512',
'CSCvq06954',
'CSCvq18980',
'CSCvq00914',
'CSCvq04456',
'CSCvq09901',
'CSCvq18845',
'CSCvp98879',
'CSCvp99354',
'CSCvq11826',
'CSCvq27817',
'CSCvq04417',
'CSCvq06967',
'CSCvq28095',
'CSCvq27642',
'CSCvp99561',
'CSCvq24543',
'CSCvq18969',
'CSCvq24640',
'CSCvp99716',
'CSCvq06928',
'CSCvq02478',
'CSCvq19271',
'CSCvq01963',
'CSCvq01968',
'CSCvq04211',
'CSCvp99702',
'CSCvq14672',
'CSCvq21876',
'CSCvq26760',
'CSCvq04398',
'CSCvq19536',
'CSCvp99525',
'CSCvq17416',
'CSCvq05528',
'CSCvq06525',
'CSCvq04201',
'CSCvq02506',
'CSCvq08215',
'CSCvq10043',
'CSCvq17367',
'CSCvq18926',
'CSCvq26645',
'CSCvq14605',
'CSCvq26351',
'CSCvq26647',
'CSCvq20563',
'CSCvq04268',
'CSCvq00136',
'CSCvq05744',
'CSCvq03956']


input_bug_list_sw =['CSCvq02619',
'CSCvq09585',
'CSCvq10937',
'CSCvq13492',
'CSCvq16165',
'CSCvq18532',
'CSCvq21087',
'CSCvq24292',
'CSCvq25189',
'CSCvp98320',
'CSCvq02272',
'CSCvq08305',
'CSCvq10325',
'CSCvq10325',
'CSCvq19473',
'CSCvq22841',
'CSCvp99955',
'CSCvq04003',
'CSCvq06925',
'CSCvq07272',
'CSCvq26002',
'CSCvq02399',
'CSCvq04257',
'CSCvq13588',
'CSCvq27331',
'CSCvp99546',
'CSCvq01404',
'CSCvq05560',
'CSCvq08913',
'CSCvq09752',
'CSCvq09956',
'CSCvq19507',
'CSCvq23677',
'CSCvq01921',
'CSCvq04253',
'CSCvq10228',
'CSCvq24830',
'CSCvq25845',
'CSCvq09928',
'CSCvq24181',
'CSCvq25161',
'CSCvp98546',
'CSCvq01131',
'CSCvq05521',
'CSCvq07103',
'CSCvq14788',
'CSCvq26432',
'CSCvq06531',
'CSCvq08606',
'CSCvq13839',
'CSCvq21740',
'CSCvq23055',
'CSCvp98082',
'CSCvq01185',
'CSCvq07267',
'CSCvq08074',
'CSCvq08691',
'CSCvq15077',
'CSCvq19300',
'CSCvq21335',
'CSCvq23743',
'CSCvq24474',
'CSCvq24726',
'CSCvq26295',
'CSCvq27559',
'CSCvq05526',
'CSCvq13466',
'CSCvq19370',
'CSCvq20154',
'CSCvq13054',
'CSCvq25072',
'CSCvq05661',
'CSCvq09627',
'CSCvq15127',
'CSCvq23695',
'CSCvq26518',
'CSCvq04262',
'CSCvq25066',
'CSCvq25616',
'CSCvq03323',
'CSCvq04711',
'CSCvq11529',
'CSCvq13043',
'CSCvq23028',
'CSCvq27569',
'CSCvq02800',
'CSCvq17858',
'CSCvq24817',
'CSCvq01150',
'CSCvp99085',
'CSCvq04522',
'CSCvq13018',
'CSCvq19326',
'CSCvq19343',
'CSCvq24818',
'CSCvq26483',
'CSCvq09153',
'CSCvq11494',
'CSCvq15486',
'CSCvq21049',
'CSCvq21364',
'CSCvq23901',
'CSCvq25613',
'CSCvp99332',
'CSCvq06676',
'CSCvq08090',
'CSCvq16585',
'CSCvq19208',
'CSCvq00670',
'CSCvq08402',
'CSCvq11071',
'CSCvq11163',
'CSCvq16189',
'CSCvq19008',
'CSCvq25068',
'CSCvq25486',
'CSCvq26506',
'CSCvq26633',
'CSCvq27325',
'CSCvq07946',
'CSCvq09899',
'CSCvq11903',
'CSCvq17631',
'CSCvq19435',
'CSCvq26752',
'CSCvq26968',
'CSCvq08925',
'CSCvq13646',
'CSCvq26011',
'CSCvq27742',
'CSCvq05679',
'CSCvq13149',
'CSCvq25360',
'CSCvq01243',
'CSCvq06703',
'CSCvq07607',
'CSCvq17518',
'CSCvq26624',
'CSCvq00152',
'CSCvq01567',
'CSCvq05152',
'CSCvq06598',
'CSCvq14713',
'CSCvq17733',
'CSCvq18958',
'CSCvp99618',
'CSCvp99986',
'CSCvq00015',
'CSCvq22705',
'CSCvq08902',
'CSCvq25209',
'CSCvq01822',
'CSCvq02783',
'CSCvq04256',
'CSCvq08424',
'CSCvq17488',
'CSCvq01917',
'CSCvq11972',
'CSCvq23907',
'CSCvp98076',
'CSCvp98087',
'CSCvq10084',
'CSCvq21466',
'CSCvq23592',
'CSCvq02850',
'CSCvq04457',
'CSCvq24078',
'CSCvq21468',
'CSCvq05006',
'CSCvq08726',
'CSCvq10651',
'CSCvq13284',
'CSCvq15489']
